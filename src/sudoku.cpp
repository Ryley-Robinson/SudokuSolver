/**
* Author: Ryley Robinson
* Version: 3.0
* 
* Sudoku2.cpp: Start with a "seed" board that is known to be a valid sudoku board.
* New sudoku boards can be generated by certain transformations that preserve sudoku-validity:
* Swap groups of 3 rows/columns, and swap rows/columns within a group of 3.
* Once a new solution is generated, remove numbers randomly to generate a starting board.
* Use a backtracking algorithm to check that the solution generated has a single solution.
* Use various human solving algorithms to solve the starting board.
*
* Entry point is the main() function.
*/

/**
* TODO:
* - Add new algorithm steps?
*/

/**
* Sudoku solving algorithm:
*
* - Fill in all possible digits in each space of the board.
* - Spaces with only one possible digit are solved.
* - Search for naked pairs. Remove possibilities eliminated by naked pairs.
* - Repeat until puzzle is solved or no options remain.
*/

#include <cstdlib>
#include <time.h>
#include <iostream>
#include <math.h>
#include <string>
#include <vector>
#include "config.h"
#include "functions.h"

/*
* Entry point for program.
* Initializes the random number generator and runs the main loop.
*/
int main()
{
    srand(static_cast<unsigned int>(time(NULL)));

    do
    {
        while (!createBoard(Conf::nDigitsToRemove, Conf::seedBoard, Conf::solvedBoard, Conf::unsolvedBoard))
        {
            continue;
        }
        std::cout << "\nCreated board:" << std::endl;
        printBoard(Conf::unsolvedBoard);

        std::cout << "\nAttempted solution:" << std::endl;
        solveBoard(Conf::unsolvedBoard);
        printBoard(Conf::unsolvedBoard);
        std::string outcome = checkSolution(Conf::solvedBoard, Conf::unsolvedBoard) ? "\nSolution is correct!" : "\nSolution is incorrect!";
        std::cout << outcome << std::endl;
    } while (runAgainCheck());
}